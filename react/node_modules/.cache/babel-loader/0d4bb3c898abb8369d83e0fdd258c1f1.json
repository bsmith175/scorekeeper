{"ast":null,"code":"import * as React from 'react';\nimport { doFetch } from '../../Util/Util';\nexport default function useQuery(endpoint) {\n  const [state, setState] = React.useReducer((state, newState) => ({ ...state,\n    ...newState\n  }), {\n    data: null,\n    loading: null,\n    error: null\n  });\n\n  function reQuery() {\n    setState({\n      loading: true\n    });\n    doFetch('GET', endpoint).then(value => {\n      setState({\n        data: value.response,\n        loading: false,\n        error: value.error\n      });\n    });\n  }\n\n  React.useEffect(() => {\n    let isMounted = true;\n    if (isMounted) setState({\n      loading: true\n    });\n    doFetch('GET', endpoint).then(value => {\n      if (isMounted) setState({\n        data: value.response,\n        loading: false,\n        error: value.error\n      });\n    }); //cleanup function\n\n    return () => isMounted = false;\n  }, []);\n  return { ...state,\n    reQuery: reQuery\n  };\n}","map":{"version":3,"sources":["/Users/bensmith/workspace/projects/crossword-league/react/src/components/Hooks/useQuery.js"],"names":["React","doFetch","useQuery","endpoint","state","setState","useReducer","newState","data","loading","error","reQuery","then","value","response","useEffect","isMounted"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAGA,eAAe,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,UAAN,CACtB,CAACF,KAAD,EAAQG,QAAR,MAAsB,EAAC,GAAGH,KAAJ;AAAW,OAAGG;AAAd,GAAtB,CADsB,EAEtB;AAACC,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,OAAO,EAAE,IAAtB;AAA4BC,IAAAA,KAAK,EAAE;AAAnC,GAFsB,CAA1B;;AAKA,WAASC,OAAT,GAAmB;AACfN,IAAAA,QAAQ,CAAC;AAACI,MAAAA,OAAO,EAAE;AAAV,KAAD,CAAR;AACAR,IAAAA,OAAO,CAAC,KAAD,EAAQE,QAAR,CAAP,CAAyBS,IAAzB,CAA+BC,KAAD,IAAW;AACzCR,MAAAA,QAAQ,CAAC;AAACG,QAAAA,IAAI,EAAEK,KAAK,CAACC,QAAb;AAAuBL,QAAAA,OAAO,EAAE,KAAhC;AAAuCC,QAAAA,KAAK,EAAEG,KAAK,CAACH;AAApD,OAAD,CAAR;AACC,KAFD;AAGH;;AACDV,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AAClB,QAAIC,SAAS,GAAG,IAAhB;AAEA,QAAIA,SAAJ,EAAeX,QAAQ,CAAC;AAACI,MAAAA,OAAO,EAAE;AAAV,KAAD,CAAR;AAEfR,IAAAA,OAAO,CAAC,KAAD,EAAQE,QAAR,CAAP,CAAyBS,IAAzB,CAA+BC,KAAD,IAAW;AACrC,UAAIG,SAAJ,EAAeX,QAAQ,CAAC;AAACG,QAAAA,IAAI,EAAEK,KAAK,CAACC,QAAb;AAAuBL,QAAAA,OAAO,EAAE,KAAhC;AAAuCC,QAAAA,KAAK,EAAEG,KAAK,CAACH;AAApD,OAAD,CAAR;AAClB,KAFD,EALkB,CAQlB;;AACA,WAAQ,MAAMM,SAAS,GAAG,KAA1B;AACH,GAVD,EAUG,EAVH;AAYA,SAAO,EAAC,GAAGZ,KAAJ;AAAWO,IAAAA,OAAO,EAAEA;AAApB,GAAP;AACH","sourcesContent":["import * as React from 'react';\nimport { doFetch } from '../../Util/Util';\n\n\nexport default function useQuery(endpoint) {\n    const [state, setState] = React.useReducer(\n        (state, newState) => ({...state, ...newState}),\n        {data: null, loading: null, error: null}\n      );\n\n    function reQuery() {\n        setState({loading: true});\n        doFetch('GET', endpoint).then((value) => {\n        setState({data: value.response, loading: false, error: value.error})\n        });\n    }\n    React.useEffect(() => {\n        let isMounted = true;\n\n        if (isMounted) setState({loading: true});\n\n        doFetch('GET', endpoint).then((value) => {\n            if (isMounted) setState({data: value.response, loading: false, error: value.error})\n        });\n        //cleanup function\n        return  () => isMounted = false;\n    }, []);\n\n    return {...state, reQuery: reQuery};\n}"]},"metadata":{},"sourceType":"module"}