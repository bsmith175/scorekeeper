{"ast":null,"code":"var _jsxFileName = \"/Users/bensmith/workspace/projects/crossword-league/react/src/views/Modals/AddScoreModal.jsx\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { H2 } from '../../Util/ViewUtil';\nimport styled from 'styled-components';\nimport { MenuItem } from '@material-ui/core';\nimport { doFetch, FORMAT_DATE, getAllDatesWithScore, scoreTypes, FORMAT_TIME_SCORE } from '../../Util/Util';\nimport format from 'date-fns/format';\nimport { formatISO } from 'date-fns';\nimport { getLeagueUserFromEmail } from '../../Util/UserUtil';\nconst commonProps = {\n  margin: 'dense',\n  fullWidth: true,\n  required: true\n};\n\nconst AddScoreModal = ({\n  open,\n  handleClickOpen,\n  handleClose,\n  onSave,\n  league\n}) => {\n  const [email, setEmail] = React.useState(null);\n  const [score, setScore] = React.useState(null); //default current date\n\n  const curDate = format(new Date(), FORMAT_DATE);\n  const [date, setDate] = React.useState(curDate); //used for time score only\n\n  const [min, setMin] = React.useState('0');\n  const [sec, setSec] = React.useState('0');\n  const isTimeScore = league.scoreType === scoreTypes.TIME;\n\n  function getLeagueUserId() {\n    return getLeagueUserFromEmail(email, league).id;\n  }\n\n  async function handleSubmit() {\n    function createScore() {\n      const time = new Date();\n      time.setHours(0, parseInt(min), parseInt(sec));\n      console.log(format(time, FORMAT_TIME_SCORE));\n      debugger;\n      return format(time, FORMAT_TIME_SCORE);\n    }\n\n    const scoreToSend = isTimeScore ? createScore() : score;\n    doFetch('POST', '/score', {\n      scoreType: league.scoreType,\n      score: scoreToSend,\n      date,\n      leagueId: league.id,\n      leagueUserId: getLeagueUserId()\n    }).then(() => {\n      onSave();\n      handleClose();\n    });\n  }\n\n  function makeScoreInput() {\n    if (isTimeScore) {\n      return /*#__PURE__*/React.createElement(TimeScoreRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, commonProps, {\n        label: \"Minutes\",\n        value: min || '',\n        onChange: event => setMin(event.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(TextField, Object.assign({}, commonProps, {\n        label: \"Seconds\",\n        value: sec || '',\n        onChange: event => setSec(event.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(TextField, Object.assign({}, commonProps, {\n        label: \"Score\",\n        value: score || '',\n        onChange: event => setScore(event.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"add-member-dialog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Add Score\"), /*#__PURE__*/React.createElement(FieldContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"auto-complete\",\n    options: league.leagueUsers,\n    getOptionLabel: option => option.user.email,\n    onChange: (event, values) => setEmail(values.user.email),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, commonProps, {\n      label: \"Your email\",\n      value: email || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, Object.assign({}, commonProps, {\n    label: \"Date\",\n    type: \"date\",\n    defaultValue: curDate,\n    onChange: event => setDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  })), makeScoreInput()), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n};\n\nexport default AddScoreModal;\nconst FieldContainer = styled(DialogContent)`\n    width: 400px;\n    margin-top: 16px;\n`;\nconst TimeScoreRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;","map":{"version":3,"sources":["/Users/bensmith/workspace/projects/crossword-league/react/src/views/Modals/AddScoreModal.jsx"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","Autocomplete","DialogContentText","DialogTitle","H2","styled","MenuItem","doFetch","FORMAT_DATE","getAllDatesWithScore","scoreTypes","FORMAT_TIME_SCORE","format","formatISO","getLeagueUserFromEmail","commonProps","margin","fullWidth","required","AddScoreModal","open","handleClickOpen","handleClose","onSave","league","email","setEmail","useState","score","setScore","curDate","Date","date","setDate","min","setMin","sec","setSec","isTimeScore","scoreType","TIME","getLeagueUserId","id","handleSubmit","createScore","time","setHours","parseInt","console","log","scoreToSend","leagueId","leagueUserId","then","makeScoreInput","event","target","value","leagueUsers","option","user","values","params","FieldContainer","TimeScoreRow","div"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { H2 } from '../../Util/ViewUtil';\nimport styled from 'styled-components';\nimport { MenuItem } from '@material-ui/core';\nimport { doFetch, FORMAT_DATE, getAllDatesWithScore, scoreTypes, FORMAT_TIME_SCORE } from '../../Util/Util';\nimport format from 'date-fns/format';\nimport { formatISO } from 'date-fns';\nimport { getLeagueUserFromEmail } from '../../Util/UserUtil';\n\nconst commonProps = {\n    margin: 'dense',\n    fullWidth: true,\n    required: true,\n};\n\nconst AddScoreModal = ({ open, handleClickOpen, handleClose, onSave, league }) => {\n\n    const [email, setEmail] = React.useState(null);\n    const [score, setScore] = React.useState(null);\n    //default current date\n    const curDate = format(new Date(), FORMAT_DATE);\n    const [date, setDate] = React.useState(curDate);\n\n    //used for time score only\n    const [min, setMin] = React.useState('0');\n    const [sec, setSec] = React.useState('0');\n    const isTimeScore = league.scoreType === scoreTypes.TIME;\n    function getLeagueUserId() {\n      return getLeagueUserFromEmail(email, league).id;\n    }\n    \n    async function handleSubmit() {\n\n      function createScore() {\n        const time = new Date();\n          time.setHours(0, parseInt(min), parseInt(sec));\n          console.log(format(time, FORMAT_TIME_SCORE));\n          debugger;\n          return (format(time, FORMAT_TIME_SCORE));\n      }\n        const scoreToSend = isTimeScore ? createScore() : score;\n        doFetch('POST', '/score', {scoreType: league.scoreType, score: scoreToSend, date, leagueId: league.id, leagueUserId: getLeagueUserId()}).then(() => {onSave(); handleClose()});\n    }\n    \n      function makeScoreInput() {\n      if (isTimeScore) {\n        return (\n          <TimeScoreRow>\n            <TextField\n                {...commonProps}\n                label=\"Minutes\"\n                value={min || ''}\n                onChange={(event) => setMin(event.target.value)}>\n            </TextField> \n            <TextField\n                {...commonProps}\n                label=\"Seconds\"\n                value={sec || ''}\n                onChange={(event) => setSec(event.target.value)}>\n            </TextField> \n          </TimeScoreRow>\n        ) \n      } else {\n        return (\n            <TextField\n                {...commonProps}\n                label=\"Score\"\n                value={score || ''}\n                onChange={(event) => setScore(event.target.value)}>\n            </TextField> \n        )\n      }\n    }\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"add-member-dialog\">Add Score</DialogTitle>\n        <FieldContainer>\n            <Autocomplete\n              id=\"auto-complete\"\n              options={league.leagueUsers}\n              getOptionLabel={(option) => option.user.email}\n              onChange={(event, values) => setEmail(values.user.email)}\n              renderInput={(params) => \n              <TextField {...params} \n                {...commonProps}\n                label=\"Your email\" \n                value={email || ''}/>}\n            />\n            <TextField\n              {...commonProps}\n              label=\"Date\"\n              type='date'\n              defaultValue={curDate}\n              onChange={(event) => setDate(event.target.value)}\n              >\n              </TextField>       \n            {makeScoreInput()}\n        </FieldContainer>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default AddScoreModal;\n\n\nconst FieldContainer = styled(DialogContent)`\n    width: 400px;\n    margin-top: 16px;\n`;\n\nconst TimeScoreRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;"]},"metadata":{},"sourceType":"module"}